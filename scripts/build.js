#!/usr/bin/env node
/**
 * Fetch the complete Pokédex (name + max‑2 types), compress with LZ‑String,
 * and overwrite /js/data.js.
 *
 * 1. npm install node-fetch lz-string p-limit --save-dev
 * 2. node scripts/build.js
 */

import fs from "fs";
import fetch from "node-fetch";
import LZString from "lz-string";
import pLimit from "p-limit";

const { compressToUTF16 } = LZString;

const TOTAL = 1025;
const API   = "https://pokeapi.co/api/v2";
const CONCURRENCY = 25;           // ← make smaller if you still get time‑outs
const RETRIES     = 3;            // per Pokémon

/* ---------------- helpers ---------------- */
async function fetchJson(url, tries = RETRIES) {
  try {
    const res = await fetch(url, { timeout: 10_000 });
    if (!res.ok) throw new Error(res.statusText);
    return res.json();
  } catch (err) {
    if (tries > 1) return fetchJson(url, tries - 1);
    throw err;
  }
}

function emitJS(array) {
  const compressed = compressToUTF16(JSON.stringify(array));
  return `/* Auto‑generated by build.js – DO NOT EDIT */\n` +
         `const compressed = ${JSON.stringify(compressed)};\n\n` +
         `export const POKEMON = JSON.parse(LZString.decompressFromUTF16(compressed));\n`;
}


/* ---------------- main ---------------- */
(async () => {
  console.log("Fetching Pokémon index…");
  const index = await fetchJson(`${API}/pokemon?limit=${TOTAL}`);
  const limit = pLimit(CONCURRENCY);

  let done = 0;
  const jobs = index.results.map(({ url }) =>
    limit(async () => {
      const p = await fetchJson(url);
      done++;
      if (done % 50 === 0) process.stdout.write(`\rFetched ${done}/${TOTAL}…`);
      return {
        id: p.id,
        name: p.name,
        types: p.types
          .sort((a, b) => a.slot - b.slot)
          .map(t => t.type.name)
          .slice(0, 2),
      };
    })
  );

  const list = await Promise.all(jobs);
  console.log(`\rFetched ${done}/${TOTAL} Pokémon. Compressing…`);

  fs.writeFileSync("./js/data.js", emitJS(list));
  console.log("✔  js/data.js written.");
})();
